type: function_py
category: notify
author:
  name: Guillaume Pivette from Neoxia
  url: https://www.linkedin.com/in/guillaume-pivette/
  avatar_url: "https://cdn-images-1.medium.com/v2/resize:fit:92/1*jHdQzX82eU5lyjBYp63NqQ@2x.png"
description: |
  Sends an email
  to `email` with `subject`, `content` and possible attachment (defined by `attachment_filename` and `attachment_content`).

  | Param  | Possible values  |
  |---|---|
  | `email`  | One or multiple comma separated emails.<br>For instance `contact@unytics.io` or `contact@unytics.io, paul.marcombes@unytics.io`   |
  | `subject`  | Email subject (will be prefixed with `[bigfunctions] `)  |
  | `content`  | Can be plain text, html or **markdown**   |
  | `attachment_content`  | Can be plain text or base64 encoded content (useful to send excel files, pdf or images)  |

  > (this function uses sendgrid to send the emails)
arguments:
  - name: to
    type: string
  - name: subject
    type: string
  - name: content
    type: string
  - name: attachment_filename
    type: string
  - name: attachment_content
    type: string
output:
  name: success
  type: BOOL
examples:
  - description: "Send email without file attached"
    arguments:
      - "'contact@unytics.io'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - "null"
      - "null"
    output: "true"
    region: ALL
  - description: "Send email with plain text file attached"
    arguments:
      - "'contact@unytics.io'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - "'report.csv'"
      - "'col1,col2\\nval1,val2\\nval3,val4'"
    output: "true"
    region: ALL
  - description: "Send email with excel file attached"
    arguments:
      - "'contact@unytics.io'"
      - "'I love BigFunctions'"
      - "'Hey Paul, could you deploy more BigFunctions üôè?'"
      - "'report.xlsx'"
      - "(select {BIGFUNCTIONS_DATASET}.dump_to_excel('[{\"col1\": \"val1\", \"col2\": \"val2\"}, {\"col1\": \"val3\", \"col2\": \"val4\"}]'))"
    output: "true"
    region: ALL
code: |
  import re
  import base64
  import mimetypes
  import requests
  import markdown
  import css_inline

  sender = {
      'name': 'BigFunctions',
      'email': 'bigfunctions@unytics.io'
  }
  reply_to = {'email': 'noreply@unytics.io'}


  def is_string_base64_encoded(string):
      try:
          return base64.b64encode(base64.b64decode(string)) == string.encode()
      except:
          return False


  def check_emails(to):
      emails = [email.strip() for email in to.split(',')]
      email_regex = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,7}\b'
      for email in emails:
          assert re.fullmatch(email_regex, email), f'email `{email}` is not a valid email'
      return emails

  def format_content(content):
      body = markdown.markdown(content, extensions=['tables'])
      html = f'''
        <html>
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
          </head>
          <body>{body}</body>
        </html>
      '''
      return css_inline.inline(html)

  def build_attachment(attachment_filename, attachment_content):
      if attachment_filename is None or attachment_content is None:
          return

      is_b64_encoded = is_string_base64_encoded(attachment_content)
      if not is_b64_encoded:
          b = base64.b64encode(bytes(attachment_content, 'utf-8'))
          attachment_content = b.decode('utf-8')

      attachment_type = mimetypes.guess_type(attachment_filename)[0]
      attachment_type = attachment_type or (
          'application/octet-stream'
          if is_b64_encoded
          else 'text/plain'
      )
      return {
          'content': attachment_content,
          'type': attachment_type,
          'filename': attachment_filename,
      }


  def send_mail(emails, subject, content, attachment):
      url = 'https://api.sendgrid.com/v3/mail/send'
      sendgrid_api_key = secrets.get('sendgrid_api_key')
      headers = {
          'Authorization': f'Bearer {sendgrid_api_key}',
          'Content-Type': 'application/json',
      }
      mail = {
          "personalizations": [{"to": [{"email": email} for email in emails]}],
          "from": sender,
          "reply_to": reply_to,
          "subject": subject,
          "content": [{"type": "text/html", "value": content}]
      }
      if attachment:
          mail['attachments'] = [attachment]
      response = requests.post(url, headers=headers, json=mail)
      assert response.ok, 'ERROR: ' + response.text


  emails = check_emails(to)
  content = format_content(content)
  attachment = build_attachment(attachment_filename, attachment_content)
  send_mail(emails, subject, content, attachment)
  return True
requirements: |
  requests
  markdown
  css_inline
quotas:
  max_rows_per_query: 10