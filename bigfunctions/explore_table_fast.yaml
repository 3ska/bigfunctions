type: procedure
usage: explore_table(fully_qualified_table)
description: Show table infos and columns statistics
arguments:
  - name: fully_qualified_table
    type: STRING
examples:
  - description: ""
    arguments:
      - '"bigquery-public-data.samples.natality"'
    region: US
    screenshot: explore_column.png
code: |
  declare project, dataset, table, query string;
  declare table_infos json;
  declare columns_queries array<string>;
  declare ite int64 default 0;

  declare parts array<string> default split(replace(fully_qualified_table, '`', ''), '.');
  set project = parts[offset(0)];
  set dataset = parts[offset(1)];
  set table = parts[offset(2)];


  execute immediate replace(replace(replace('''
    select 
      array_agg(replace(replace(replace(replace(replace("""(

        with

        stats as (
          select
            count(*) as row_count,
            count(distinct {{column}}) as distinct_count,
            count(distinct {{column}}) / count(*) as distinct_ratio,
            count(*) - count({{column}}) as missing_count,
            (count(*) - count({{column}})) / count(*) as missing_ratio,
            cast(min({{column_if_numeric}}) as float64) as min,
            cast(avg({{column_if_numeric}}) as float64) as mean,
            cast(max({{column_if_numeric}}) as float64) as max,
          from `{{project}}.{{dataset}}.{{table}}`
        ),

        hist_bins_for_reals as (
          select
            i,
            `min` + i/{{nbins}}. * (`max`-`min`)  as low,
            `min` + (i+1)/{{nbins}}. * (`max`-`min`) + if(i={{nbins}}-1, 1, 0)  as up,
            (
              '[' ||
                cast(round(`min` + i/{{nbins}}. * (`max`-`min`), 2) as string) || ', ' ||
                cast(round(`min` + (i+1)/{{nbins}}. * (`max`-`min`), 2) as string) ||
              if(i={{nbins}}-1, ']', '[')
            ) as label,
            'real' as bin_mode,
          from stats, unnest(generate_array(0, {{nbins}})) i
          where i < {{nbins}}
        ),

        hist_bins_for_integers as (
          select
            i,
            i - 0.5  as low,
            i + 0.5  as up,
            cast(i as string) as label,
            'integer' as bin_mode,
          from stats, unnest(generate_array(stats.min, least(stats.max, stats.min + 60))) i
        ),

        hist_bins as (
          select * from hist_bins_for_reals
          where bin_mode = if('{{data_type}}' = 'INT64' and (select count(*) from hist_bins_for_integers) <= 60, 'integer', 'real')
          union all
          select * from hist_bins_for_integers
          where bin_mode = if('{{data_type}}' = 'INT64' and (select count(*) from hist_bins_for_integers) <= 60, 'integer', 'real')
        ),

        hist_counts as (
          select
            bin.i,
            count(*) as row_count,
          from `{{project}}.{{dataset}}.{{table}}`
          inner join hist_bins as bin
          on {{column_if_numeric}} >= bin.low and {{column_if_numeric}} < bin.up
          group by i
        ),

        hist as (
          select array_agg(
            struct(hist_bins.label as x, cast(ifnull(row_count, 0) as float64) as y)
            order by i
          ) hist
          from hist_bins
          left join hist_counts using(i)
        ),

        top_values as (
          select
            cast({{column}} as string) as value,
            count(*) as value_count,
            count(*) * 1. / (select row_count from stats) as value_ratio,
          from `{{project}}.{{dataset}}.{{table}}`
          group by 1
          limit {{nbins_top_values}}
        ),

        top_values_hist as (
          select array_agg(
            struct(value as x, cast(value_count as float64) as y)
            order by value_count desc
          ) hist
          from top_values
        )

        select to_json(struct(
          '{{column}}' as name,
          '{{data_type}}' as data_type,
          (select stats from stats) as stats,
          (select hist.hist from hist) as hist,
          (select bigfunctions.us.chart(hist.hist, 'bar', 'value_count') from hist) as hist_html,
          (select bigfunctions.us.chart(top_values_hist.hist, 'bar', 'value_count') from top_values_hist) as top_values_hist_html,
          (select array_agg(struct(top_values).top_values order by top_values.value_count desc) from top_values) as top_values
        )) as json
      )""",
      '{{column}}', column_name),
      '{{column_if_numeric}}', if(lower(data_type) in ('float64', 'int64', 'numeric'), column_name, '0')),
      '{{data_type}}', data_type),
      '{{nbins}}', '10'),
      '{{nbins_top_values}}', '100'
      )),

    from `{{project}}.{{dataset}}.INFORMATION_SCHEMA.COLUMNS`
    where table_name = '{{table}}'
  ''',
  '{{project}}', project),
  '{{dataset}}', dataset),
  '{{table}}', table
  ) into columns_queries;

  create or replace temp table columns (context json);
  loop
    execute immediate 'insert into columns \n' || array_to_string(
      (
        select array_agg(column_query) 
        from unnest(columns_queries) column_query 
        with offset as off where off >= ite * 5 and off < (ite + 1) * 5
      ), 
      '\n union all \n'
    );
    if (ite + 1) * 5 > array_length(columns_queries) then leave; end if;
    set ite = ite + 1;
  end loop;

  execute immediate replace(replace(replace("""
    select to_json(struct(
      '`{{project}}.{{dataset}}.{{table}}`' as name,
      format_timestamp('%F %X UTC', timestamp_millis(stats.last_modified_time)) as last_modified_time,
      stats.row_count,
      stats.size_bytes
    ))
    from `{{project}}.{{dataset}}.__TABLES__` stats
    where table_id = '{{table}}'
  """,
  '{{project}}', project),
  '{{dataset}}', dataset),
  '{{table}}', table
  ) into table_infos;

  create or replace temp table bigfunction_result as
  select to_json(struct(
    table_infos as table,
    (select array_agg(context) from columns) as columns
  )) as json;
template: |
  <div class="container">
    <div class="columns">
      <div class="column">
        <section class="hero">
          <div class="hero-body">
            <p class="is-size-3" style="max-width: none">Table <code>{{ table.name }}</code></p>
            <p class="is-size-5 mt-4" style="max-width: none;">
              {{ table.row_count | add_thousands_separators_to_integers }} rows<br>
              {{ table.size_bytes | size_bytes_pretty }}<br>
              last updated on {{ table.last_modified_time }}
            </p>
            <p class="mt-4" style="max-width: none; color: #3367d6;"><i>Generated by bigfunctions.io</i></p>
          </div>
        </section>
      </div>
    </div>
    {% for col in columns %}
    <div class="box">
      <p class="is-size-4 mb-6 mt-4">Column <code>{{ col.name }}</code> <code>{{ col.data_type }}</code></p>
      <div class="columns">
        <div class="column is-one-quarter">
          <table class="table is-narrow">
            {% if data_type not in ['STRING', 'BOOL'] %}
              <tr><th class="has-text-weight-bold">min           </th><td>{{ col.stats.min            | add_thousands_separators_to_integers }}</td></tr>
              <tr><th class="has-text-weight-bold">mean          </th><td>{{ col.stats.mean           | add_thousands_separators_to_integers }}</td></tr>
              <tr><th class="has-text-weight-bold">max           </th><td>{{ col.stats.max            | add_thousands_separators_to_integers }}</td></tr>
            {% endif %}
            {% if data_type != 'BOOL' %}
              <tr><th class="has-text-weight-bold">distinct_count</th><td>{{ col.stats.distinct_count | add_thousands_separators_to_integers }}</td></tr>
              {% if stats.distinct_ratio > 0.001 %}
                <tr><th class="has-text-weight-bold">distinct_ratio</th><td {% if stats.distinct_ratio == 1 %}class="has-background-success-light"{% elif stats.distinct_ratio > 0.9 %}class="has-background-danger-light"{% endif %}>{{ col.stats.distinct_ratio | as_percentage }}</td></tr>
              {% endif %}
            {% endif %}
            <tr><th class="has-text-weight-bold">missing_count </th><td {% if stats.missing_ratio == 0 %}class="has-background-success-light"{% endif %}>{{ col.stats.missing_count  | add_thousands_separators_to_integers }}</td></tr>
            {% if stats.missing_count != 0 %}
              <tr><th class="has-text-weight-bold">missing_ratio </th><td class="has-background-danger-light">{{ col.stats.missing_ratio  | as_percentage }}</td></tr>
            {% endif %}
            <tr><th class="has-text-weight-bold">row_count     </th><td>{{ col.stats.row_count      | add_thousands_separators_to_integers }}</td></tr>
          </table>
        </div>
        <div class="column">
          {% if data_type in ['STRING', 'BOOL'] %}
            {{ col.top_values_hist_html|safe }}
          {% else %}
            {{ col.hist_html|safe }}
          {% endif %}
        </div>
      </div>
    </div>
    {% endfor %}
  </div>
