type: procedure
samples:
  - "explore_table(fully_qualified_table, output)"
description: Show table infos and statistics
arguments:
  - name: fully_qualified_table
    type: STRING
    test_value: bigquery-public-data.samples.natality
outputs:
  - name: output
    type: JSON
example: |-
  ``` sql
  DECLARE output JSON;
  CALL {BIGFUNCTIONS_DATASET}.explore_table('bigquery-public-data.samples.natality', output);
  select string(output.html)
  ```
code: |
  declare project, dataset, table, query string;
  declare column_result json;
  declare columns_json array<json> default [];
  declare columns_html array<string> default [];
  declare table_infos json;

  declare parts array<string> default split(replace(fully_qualified_table, '`', ''), '.');
  set project = parts[offset(0)];
  set dataset = parts[offset(1)];
  set table = parts[offset(2)];

  execute immediate replace(replace(replace('''
  create or replace temp table columns as
    select *
    from `{{project}}.{{dataset}}.INFORMATION_SCHEMA.COLUMNS`
    where table_name = '{{table}}'
  ''',
  '{{project}}', project),
  '{{dataset}}', dataset),
  '{{table}}', table
  );

  for column in (select * from columns)
  do
      call {BIGFUNCTIONS_DATASET}.explore_column(
        replace(replace(replace(replace(
          '{{project}}.{{dataset}}.{{table}}.{{column}}',
          '{{project}}', project),
          '{{dataset}}', dataset),
          '{{table}}', table),
          '{{column}}', column.column_name
        ),
        column_result
      );

      set columns_json = array_concat(columns_json, [column_result.json]);
      set columns_html = array_concat(columns_html, [string(column_result.html)]);
  end for;


  execute immediate replace(replace(replace("""
    select to_json(struct(
      '`{{project}}.{{dataset}}.{{table}}`' as name,
      format_timestamp('%F %X UTC', timestamp_millis(stats.last_modified_time)) as last_modified_time,
      stats.row_count,
      stats.size_bytes
    ))
    from `{{project}}.{{dataset}}.__TABLES__` stats
    where table_id = '{{table}}'
  """,
  '{{project}}', project),
  '{{dataset}}', dataset),
  '{{table}}', table
  ) into table_infos;

  set output = to_json(struct(
    table_infos as table,
    columns_json as columns,
    array_to_string(columns_html, '') as columns_html
  ));
template: |
  <div class="container">
    <div class="columns">
      <div class="column">
        <section class="hero">
          <div class="hero-body">
            <p class="is-size-3" style="max-width: none">Table <code>{{ table.name }}</code></p>
            <p class="is-size-5 mt-4" style="max-width: none;">
              {{ table.row_count | add_thousands_separators_to_integers }} rows<br>
              {{ table.size_bytes | size_bytes_pretty }}<br>
              last updated on {{ table.last_modified_time }}
            </p>
            <p class="mt-4" style="max-width: none; color: #3367d6;"><i>Generated by bigfunctions.io</i></p>
          </div>
        </section>
      </div>
    </div>
    {{ columns_html|safe }}
  </div>
output_screenshot:
  - https://unytics.io/bigfunctions/assets/images/explore_table.png