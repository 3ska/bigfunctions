type: function_sql
category: AI
author:
  name: Paul Marcombes
  url: https://www.linkedin.com/in/paul-marcombes
  avatar_url: "https://lh3.googleusercontent.com/a-/ACB-R5RDf2yxcw1p_IYLCKmiUIScreatDdhG8B83om6Ohw=s260"
description: |
  Generate a `sql_query` from a `natual_language_query` on `table`
  .

  `table` must exist in the project you use for querying.
  Its schema will be retrieved from INFORMATION_SCHEMA
  to give context to the generative AI model.
  It must be like `DATASET.TABLE` with no specified project.
arguments:
  - name: natual_language_query
    type: string
  - name: table
    type: any type
output:
  name: sql_query
  type: string
examples:
  - description: ""
    arguments:
      - |

        '''
        compute how much
        each customer spent by day
        in the latest 90 days.
        '''
      - "'YOUR_DATASET.YOUR_TABLE'"
    output: |
      SELECT
        customer_id,
        DATE(issued_at) AS day,
        SUM(amount) AS total_spent
      FROM DATA4ALL.OPERATIONS
      WHERE issued_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)
      GROUP BY customer_id, day
      ORDER BY customer_id, day
    region: ALL
  - description: ""
    arguments:
      - "3"
      - "[0, 1, 5, 10]"
    output: "[1, 5["
    region: ALL
  - description: ""
    arguments:
      - "9"
      - "[0, 1, 5, 10]"
    output: "[5, 10]"
    region: ALL
  - description: ""
    arguments:
      - "130"
      - "[0, 1, 5, 10]"
    output: "]10, +∞["
    region: ALL
code: |
  (
    select
      case
        when value < bin_bounds[offset(0)] then "]-∞, " || cast(bin_bounds[offset(0)] as string) || "["
        when value > bin_bounds[ordinal(array_length(bin_bounds))] then "]"     || cast(bin_bounds[ordinal(array_length(bin_bounds))] as string) || ", +∞["
        when value = bin_bounds[ordinal(array_length(bin_bounds))] and array_length(bin_bounds) = 1 then cast(bin_bounds[offset(0)] as string)
        when value = bin_bounds[ordinal(array_length(bin_bounds))] then "["     || cast(bin_bounds[ordinal(array_length(bin_bounds) - 1)] as string) || ", " || cast(bin_bounds[ordinal(array_length(bin_bounds))] as string) || "]"
        else (
          with offsets as (
            select
              offset - 1 as lower_offset,
              offset as upper_offset,
            from unnest(bin_bounds) as x
            with offset
            where x > value limit 1
          )

          select (
            "[" ||
              cast(bin_bounds[offset(greatest(0, lower_offset))] as string) || ", " ||
              cast(bin_bounds[offset(upper_offset)] as string) ||
            if(upper_offset < array_length(bin_bounds) - 1, "[", "]")
          )
          from offsets
        )
      end
  )
