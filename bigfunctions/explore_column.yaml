type: procedure
usage: explore_column(fully_qualified_column, output)
description: Show column statistics
arguments:
  - name: fully_qualified_column
    type: STRING
outputs:
  - name: output
    type: JSON
examples:
  - description: ""
    arguments:
      - '"bigquery-public-data.samples.natality.weights_pounds"'
    region: US
    screenshot: explore_column.png
code: |
  declare project, dataset, table, column, data_type, query string;
  declare nbins string default '10';
  declare nbins_top_values string default '100';

  declare parts array<string> default split(replace(fully_qualified_column, '`', ''), '.');
  set project = parts[offset(0)];
  set dataset = parts[offset(1)];
  set table = parts[offset(2)];
  set column = parts[offset(3)];


  execute immediate replace(replace(replace(replace(
    '''
    select data_type
    from `{{project}}.{{dataset}}.INFORMATION_SCHEMA.COLUMNS`
    where
      table_name = '{{table}}'
      and column_name = '{{column}}'
    ''',
    '{{project}}', project),
    '{{dataset}}', dataset),
    '{{table}}', table),
    '{{column}}', column
  ) into data_type;


  execute immediate replace(replace(replace(replace(replace(replace(replace(replace('''
    with

    stats as (
      select
        count(*) as row_count,
        count(distinct {{column}}) as distinct_count,
        count(distinct {{column}}) / count(*) as distinct_ratio,
        count(*) - count({{column}}) as missing_count,
        (count(*) - count({{column}})) / count(*) as missing_ratio,
        cast(min({{column_if_numeric}}) as float64) as min,
        cast(avg({{column_if_numeric}}) as float64) as mean,
        cast(max({{column_if_numeric}}) as float64) as max,
      from `{{project}}.{{dataset}}.{{table}}`
    ),

    hist_bins_for_reals as (
      select
        i,
        `min` + i/{{nbins}}. * (`max`-`min`)  as low,
        `min` + (i+1)/{{nbins}}. * (`max`-`min`) + if(i={{nbins}}-1, 1, 0)  as up,
        (
          '[' ||
            cast(round(`min` + i/{{nbins}}. * (`max`-`min`), 2) as string) || ', ' ||
            cast(round(`min` + (i+1)/{{nbins}}. * (`max`-`min`), 2) as string) ||
          if(i={{nbins}}-1, ']', '[')
        ) as label,
        'real' as bin_mode,
      from stats, unnest(generate_array(0, {{nbins}})) i
      where i < {{nbins}}
    ),

    hist_bins_for_integers as (
      select
        i,
        i - 0.5  as low,
        i + 0.5  as up,
        cast(i as string) as label,
        'integer' as bin_mode,
      from stats, unnest(generate_array(stats.min, least(stats.max, stats.min + 100))) i
    ),

    hist_bins as (
      select * from hist_bins_for_reals
      where bin_mode = if('{{data_type}}' = 'INT64' and (select distinct_count from stats) <= 101, 'integer', 'real')
      union all
      select * from hist_bins_for_integers
      where bin_mode = if('{{data_type}}' = 'INT64' and (select distinct_count from stats) <= 101, 'integer', 'real')
    ),

    hist_counts as (
      select
        bin.i,
        count(*) as row_count,
      from `{{project}}.{{dataset}}.{{table}}`
      inner join hist_bins as bin
      on {{column_if_numeric}} >= bin.low and {{column_if_numeric}} < bin.up
      group by i
    ),

    hist as (
      select array_agg(
        struct(hist_bins.label as x, cast(ifnull(row_count, 0) as float64) as y)
        order by i
      ) hist
      from hist_bins
      left join hist_counts using(i)
    ),

    top_values as (
      select
        cast({{column}} as string) as value,
        count(*) as value_count,
        count(*) * 1. / (select row_count from stats) as value_ratio,
      from `{{project}}.{{dataset}}.{{table}}`
      group by 1
      limit {{nbins_top_values}}
    ),

    top_values_hist as (
      select array_agg(
        struct(value as x, cast(value_count as float64) as y)
        order by value_count desc
      ) hist
      from top_values
    )

    select to_json(struct(
      '{{column}}' as name,
      '{{data_type}}' as data_type,
      (select stats from stats) as stats,
      (select hist.hist from hist) as hist,
      (select {BIGFUNCTIONS_DATASET}.chart(hist.hist, 'bar', 'value_count') from hist) as hist_html,
      (select {BIGFUNCTIONS_DATASET}.chart(top_values_hist.hist, 'bar', 'value_count') from top_values_hist) as top_values_hist_html,
      (select array_agg(struct(top_values).top_values order by top_values.value_count desc) from top_values) as top_values
    ))
  ''',
  '{{project}}', project),
  '{{dataset}}', dataset),
  '{{table}}', table),
  '{{column}}', column),
  '{{column_if_numeric}}', if(lower(data_type) in ('float64', 'int64', 'numeric'), column , '0')),
  '{{data_type}}', data_type),
  '{{nbins}}', nbins),
  '{{nbins_top_values}}', nbins_top_values
  ) into output;
template: |
  <div class="container">
    <div class="box">
      <p class="is-size-4 mb-6 mt-4">Column <code>{{ name }}</code> <code>{{ data_type }}</code></p>
      {% if data_type in ['STRING', 'BOOL'] %}
        <div class="columns">
          <div class="column is-one-quarter">
            <table class="table is-narrow">
              {% for label, value in stats -%}
                <tr>
                  <th class="has-text-weight-bold">{{ label }}</th>
                  <td>{% if 'ratio' in label%}{{ value | as_percentage }}{% else %}{{ value | add_thousands_separators_to_integers }}{% endif %}</td>
                </tr>
              {% endfor %}
            </table>
          </div>
          <div class="column">
            {{ top_values_hist_html|safe }}
          </div>
        </div>
      {% else %}
        <div class="columns">
          <div class="column is-one-quarter">
            <table class="table is-narrow">
              {% for label, value in stats -%}
                <tr>
                  <th class="has-text-weight-bold">{{ label }}</th>
                  <td>{% if 'ratio' in label%}{{ value | as_percentage }}{% else %}{{ value | add_thousands_separators_to_integers }}{% endif %}</td>
                </tr>
              {% endfor %}
            </table>
          </div>
          <div class="column">
            {{ hist_html|safe }}
          </div>
        </div>
      {% endif %}
    </div>
  </div>