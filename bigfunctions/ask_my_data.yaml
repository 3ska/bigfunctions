type: procedure
category: AI
author:
  name: Paul Marcombes
  url: https://www.linkedin.com/in/paul-marcombes
  avatar_url: "https://lh3.googleusercontent.com/a-/ACB-R5RDf2yxcw1p_IYLCKmiUIScreatDdhG8B83om6Ohw=s260"
description: |
  Ask your data
  any `question` in natural language. It will be transformed into a SQL query then executed over your data.

  > If you don't feel lucky or want to see the SQL query before executing it, set `i_am_lucky` argument to `false`
  >
  > This function will call `ask_bison` BigFunction which uses Bison, one of Google Generative AI language model to transform your `natural_language_query` into a SQL query.

  | Param  | Description  |
  |---|---|
  | `natural_language_query`  | A question to ask over your data. It may start with a verb |
  | `fully_qualified_table`  | A table whose schema will be given to the generative AI model for context.<br> - `fully_qualified_table` format must be like `PROJECT.DATASET.TABLE`.<br>  - `fully_qualified_table` must exist in the project you use for making queries.<br>  - You must have read permission on the table schema  |
arguments:
  - name: question
    type: string
  - name: fully_qualified_table
    type: string
examples:
  - description: ""
    arguments:
      - "'get the 3 articles which generated the most revenue in 2023'"
      - "'{BIGFUNCTIONS_DATASET}.sales'"
    output: |
      +------------+---------+
      | product_id | revenue |
      +------------+---------+
      + 8          + 50286   |
      + 6          + 46172   |
      + 10         + 27972   |
      +------------+---------+
code: |
  call {BIGFUNCTIONS_DATASET}.generate_sql(question, fully_qualified_table);
  begin
    execute immediate '''
      create or replace temp table bigfunction_result as
      ''' || (select generated_sql from bigfunction_result);

  exception when error then
    select error('FAILED to execute generated query. To see it run `select * from bigfunction_result`');
  end;
